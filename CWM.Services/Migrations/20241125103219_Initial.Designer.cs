// <auto-generated />
using System;
using CWM.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CWM.Database.Migrations
{
    [DbContext(typeof(CWMContext))]
    [Migration("20241125103219_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentAppointmentBlocked", b =>
                {
                    b.Property<int>("AppointmentBlockedId")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentsId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentBlockedId", "AppointmentsId");

                    b.HasIndex("AppointmentsId");

                    b.ToTable("AppointmentAppointmentBlocked");
                });

            modelBuilder.Entity("CWM.Database.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServicePerformed")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            Description = "Pregled auta, mali servis i cudna buka na velikim brzinama",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicePerformed = 2,
                            StartDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTypeId = 2,
                            Description = "Pregled auta, mali servis i cudna buka na velikim brzinama",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicePerformed = 2,
                            StartDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTypeId = 3,
                            Description = "Pregled auta, mali servis i cudna buka na velikim brzinama",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicePerformed = 2,
                            StartDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentTypeId = 1,
                            Description = "Pregled auta, mali servis i cudna buka na velikim brzinama",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicePerformed = 2,
                            StartDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppointmentTypeId = 2,
                            Description = "Pregled auta, mali servis i cudna buka na velikim brzinama",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicePerformed = 2,
                            StartDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppointmentTypeId = 3,
                            Description = "Pregled auta, mali servis i cudna buka na velikim brzinama",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicePerformed = 2,
                            StartDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.AppointmentBlocked", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BlockedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppointmentBlocked");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockedDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BlockedDate = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BlockedDate = new DateTime(2024, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BlockedDate = new DateTime(2024, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BlockedDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            BlockedDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#cc7e0a",
                            Name = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Color = "##1bb809",
                            Name = "APPROVED"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#fc0303",
                            Name = "NOT APPROVED"
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 6,
                            Name = "Mostar",
                            ZipCode = ""
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Jablanica",
                            ZipCode = "88420"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Gračanica",
                            ZipCode = "88400"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 5,
                            Name = "Tuzla",
                            ZipCode = ""
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Srebrenik",
                            ZipCode = "88000"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            Name = "Živinice",
                            ZipCode = ""
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Makedonija"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Slovenija"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Srbija"
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kompresor klime",
                            Manufacturer = "BOSCH",
                            PartName = "Kompresor klime",
                            Price = 39m,
                            SerialNumber = "RT245GFSW26GFS"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kompresor klime",
                            Manufacturer = "BOSCH",
                            PartName = "Kompresor klime",
                            Price = 39m,
                            SerialNumber = "RT245GFSW26GFS"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Kompresor klime",
                            Manufacturer = "BOSCH",
                            PartName = "Kompresor klime",
                            Price = 39m,
                            SerialNumber = "RT245GFSW26GFS"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kompresor klime",
                            Manufacturer = "BOSCH",
                            PartName = "Kompresor klime",
                            Price = 39m,
                            SerialNumber = "RT245GFSW26GFS"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kompresor klime",
                            Manufacturer = "BOSCH",
                            PartName = "Kompresor klime",
                            Price = 39m,
                            SerialNumber = "RT245GFSW26GFS"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Kompresor klime",
                            Manufacturer = "BOSCH",
                            PartName = "Kompresor klime",
                            Price = 39m,
                            SerialNumber = "RT245GFSW26GFS"
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CitizenshipId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2001, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenshipId = 1,
                            CityId = 1,
                            CreateDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3800),
                            Email = "sendić@gmail.com",
                            FirstName = "Amir",
                            Gender = 0,
                            LastName = "Sendić",
                            Mobile = "062342376",
                            OfficePhone = "38734549",
                            Password = "Admin",
                            Username = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2000, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenshipId = 2,
                            CityId = 2,
                            CreateDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3862),
                            Email = "stufo@gmail.com",
                            FirstName = "Samra",
                            Gender = 1,
                            LastName = "Tufo",
                            Mobile = "062342376",
                            OfficePhone = "38734549",
                            Password = "Admin",
                            Username = "samra"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1990, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenshipId = 3,
                            CityId = 3,
                            CreateDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3867),
                            Email = "tufo@gmail.com",
                            FirstName = "Omer",
                            Gender = 0,
                            LastName = "Tufo",
                            Mobile = "062342376",
                            OfficePhone = "38734549",
                            Password = "Admin",
                            Username = "omer"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1975, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenshipId = 4,
                            CityId = 4,
                            CreateDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3871),
                            Email = "kremić@gmail.com",
                            FirstName = "Merima",
                            Gender = 1,
                            LastName = "Kremić",
                            Mobile = "062342376",
                            OfficePhone = "38734549",
                            Password = "Admin",
                            Username = "merima"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2001, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenshipId = 5,
                            CityId = 5,
                            CreateDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3874),
                            Email = "karić@gmail.com",
                            FirstName = "Dario",
                            Gender = 0,
                            LastName = "Karić",
                            Mobile = "062342376",
                            OfficePhone = "38734549",
                            Password = "Admin",
                            Username = "dario"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1994, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenshipId = 6,
                            CityId = 6,
                            CreateDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3877),
                            Email = "babić@gmail.com",
                            FirstName = "Selma",
                            Gender = 1,
                            LastName = "Babić",
                            Mobile = "062342376",
                            OfficePhone = "38734549",
                            Password = "Admin",
                            Username = "selma"
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Role = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Role = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Role = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Role = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Role = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Role = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chassis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CubicCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilowatts")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Transmision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Volkswagen",
                            Chassis = "WVWZZZ6NZ1Y125494",
                            CubicCapacity = 1392,
                            Fuel = "Gasoline",
                            Kilowatts = 55,
                            Model = "Polo",
                            ProductionDate = new DateTime(2000, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Transmision = "Manual",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Volkswagen",
                            Chassis = "WVWZZZ6NZ1Y125494",
                            CubicCapacity = 1392,
                            Fuel = "Gasoline",
                            Kilowatts = 55,
                            Model = "Polo",
                            ProductionDate = new DateTime(2000, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Transmision = "Manual",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Volkswagen",
                            Chassis = "WVWZZZ6NZ1Y125494",
                            CubicCapacity = 1392,
                            Fuel = "Gasoline",
                            Kilowatts = 55,
                            Model = "Polo",
                            ProductionDate = new DateTime(2000, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Transmision = "Manual",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Volkswagen",
                            Chassis = "WVWZZZ6NZ1Y125494",
                            CubicCapacity = 1392,
                            Fuel = "Gasoline",
                            Kilowatts = 55,
                            Model = "Polo",
                            ProductionDate = new DateTime(2000, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Transmision = "Manual",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Volkswagen",
                            Chassis = "WVWZZZ6NZ1Y125494",
                            CubicCapacity = 1392,
                            Fuel = "Gasoline",
                            Kilowatts = 55,
                            Model = "Polo",
                            ProductionDate = new DateTime(2000, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Transmision = "Manual",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Volkswagen",
                            Chassis = "WVWZZZ6NZ1Y125494",
                            CubicCapacity = 1392,
                            Fuel = "Gasoline",
                            Kilowatts = 55,
                            Model = "Polo",
                            ProductionDate = new DateTime(2000, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Transmision = "Manual",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.VehicleServiceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleServiceHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            ServiceDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3979),
                            ServiceType = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            ServiceDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3983),
                            ServiceType = 0,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            ServiceDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3985),
                            ServiceType = 4,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            ServiceDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3987),
                            ServiceType = 5,
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            ServiceDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3989),
                            ServiceType = 1,
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            ServiceDate = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(3991),
                            ServiceType = 0,
                            VehicleId = 6
                        });
                });

            modelBuilder.Entity("CWM.Database.Models.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Concerne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GarageBox")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sugestions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleServiceHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleServiceHistoryId");

                    b.ToTable("WorkOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Concerne = "Paljenje auta",
                            Description = "Potrebno duze vrijeme da upali kada je auto zagrijano",
                            EndTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4018),
                            GarageBox = 0,
                            OrderNumber = "SGTA252ASF276",
                            StartTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4017),
                            Sugestions = "Provjeriti dizne i alnaser",
                            UserId = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            Concerne = "Paljenje auta",
                            Description = "Potrebno duze vrijeme da upali kada je auto zagrijano",
                            EndTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4026),
                            GarageBox = 0,
                            OrderNumber = "SGTA252ASF276",
                            StartTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4025),
                            Sugestions = "Provjeriti dizne i alnaser",
                            UserId = 2,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            Concerne = "Paljenje auta",
                            Description = "Potrebno duze vrijeme da upali kada je auto zagrijano",
                            EndTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4030),
                            GarageBox = 0,
                            OrderNumber = "SGTA252ASF276",
                            StartTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4029),
                            Sugestions = "Provjeriti dizne i alnaser",
                            UserId = 3,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            Concerne = "Paljenje auta",
                            Description = "Potrebno duze vrijeme da upali kada je auto zagrijano",
                            EndTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4034),
                            GarageBox = 0,
                            OrderNumber = "SGTA252ASF276",
                            StartTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4032),
                            Sugestions = "Provjeriti dizne i alnaser",
                            UserId = 4,
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            Concerne = "Paljenje auta",
                            Description = "Potrebno duze vrijeme da upali kada je auto zagrijano",
                            EndTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4037),
                            GarageBox = 0,
                            OrderNumber = "SGTA252ASF276",
                            StartTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4036),
                            Sugestions = "Provjeriti dizne i alnaser",
                            UserId = 5,
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 6,
                            Concerne = "Paljenje auta",
                            Description = "Potrebno duze vrijeme da upali kada je auto zagrijano",
                            EndTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4041),
                            GarageBox = 0,
                            OrderNumber = "SGTA252ASF276",
                            StartTime = new DateTime(2024, 11, 25, 11, 32, 18, 926, DateTimeKind.Local).AddTicks(4040),
                            Sugestions = "Provjeriti dizne i alnaser",
                            UserId = 6,
                            VehicleId = 6
                        });
                });

            modelBuilder.Entity("PartVehicleServiceHistory", b =>
                {
                    b.Property<int>("PartsId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleServiceHistoryId")
                        .HasColumnType("int");

                    b.HasKey("PartsId", "VehicleServiceHistoryId");

                    b.HasIndex("VehicleServiceHistoryId");

                    b.ToTable("PartVehicleServiceHistory");
                });

            modelBuilder.Entity("AppointmentAppointmentBlocked", b =>
                {
                    b.HasOne("CWM.Database.Models.AppointmentBlocked", null)
                        .WithMany()
                        .HasForeignKey("AppointmentBlockedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CWM.Database.Models.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CWM.Database.Models.Appointment", b =>
                {
                    b.HasOne("CWM.Database.Models.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId");

                    b.HasOne("CWM.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CWM.Database.Models.City", b =>
                {
                    b.HasOne("CWM.Database.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CWM.Database.Models.User", b =>
                {
                    b.HasOne("CWM.Database.Models.Country", "Citizenship")
                        .WithMany("Users")
                        .HasForeignKey("CitizenshipId");

                    b.HasOne("CWM.Database.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("Citizenship");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CWM.Database.Models.UserRole", b =>
                {
                    b.HasOne("CWM.Database.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CWM.Database.Models.Vehicle", b =>
                {
                    b.HasOne("CWM.Database.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CWM.Database.Models.VehicleServiceHistory", b =>
                {
                    b.HasOne("CWM.Database.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleServiceHistory")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CWM.Database.Models.WorkOrder", b =>
                {
                    b.HasOne("CWM.Database.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("CWM.Database.Models.User", "User")
                        .WithMany("WorkOrders")
                        .HasForeignKey("UserId");

                    b.HasOne("CWM.Database.Models.Vehicle", "Vehicle")
                        .WithMany("WorkOrders")
                        .HasForeignKey("VehicleId");

                    b.HasOne("CWM.Database.Models.VehicleServiceHistory", null)
                        .WithMany("WorkOrders")
                        .HasForeignKey("VehicleServiceHistoryId");

                    b.Navigation("Appointment");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("PartVehicleServiceHistory", b =>
                {
                    b.HasOne("CWM.Database.Models.Part", null)
                        .WithMany()
                        .HasForeignKey("PartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CWM.Database.Models.VehicleServiceHistory", null)
                        .WithMany()
                        .HasForeignKey("VehicleServiceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CWM.Database.Models.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("CWM.Database.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CWM.Database.Models.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Vehicles");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("CWM.Database.Models.Vehicle", b =>
                {
                    b.Navigation("VehicleServiceHistory");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("CWM.Database.Models.VehicleServiceHistory", b =>
                {
                    b.Navigation("WorkOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
